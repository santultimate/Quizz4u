import 'dart:convert';
import 'dart:io';

// Script pour g√©n√©rer automatiquement des questions suppl√©mentaires
void main() {
  print('üöÄ G√©n√©ration automatique de questions suppl√©mentaires...');

  // Mod√®les de questions par cat√©gorie
  Map<String, List<Map<String, dynamic>>> questionTemplates = {
    'Histoire du Mali': [
      {
        'template': 'Quel √©tait le nom de {element} en {p√©riode} ?',
        'elements': [
          'la capitale',
          'le roi',
          'l\'empire',
          'la ville',
          'le fleuve'
        ],
        'periodes': [
          'l\'Empire du Mali',
          'l\'Empire Songha√Ø',
          'la p√©riode coloniale',
          'l\'ind√©pendance'
        ],
        'answers': ['Gao', 'Tombouctou', 'Bamako', 'S√©gou', 'Mopti'],
        'explanations': [
          'Gao √©tait une ville importante de l\'Empire Songha√Ø.',
          'Tombouctou √©tait un centre culturel et commercial majeur.',
          'Bamako est la capitale actuelle du Mali.',
          'S√©gou √©tait un royaume important au Mali.',
          'Mopti est une ville portuaire importante.'
        ]
      }
    ],
    'Sciences': [
      {
        'template': 'Quel est le nom de {concept} en {domaine} ?',
        'concepts': [
          'la force',
          'l\'√©nergie',
          'la mati√®re',
          'la r√©action',
          'l\'√©l√©ment'
        ],
        'domaines': ['physique', 'chimie', 'biologie', 'astronomie'],
        'answers': [
          'La gravit√©',
          'L\'√©lectricit√©',
          'L\'atome',
          'La photosynth√®se',
          'L\'oxyg√®ne'
        ],
        'explanations': [
          'La gravit√© est une force fondamentale de la nature.',
          'L\'√©lectricit√© est une forme d\'√©nergie.',
          'L\'atome est la plus petite unit√© de mati√®re.',
          'La photosynth√®se est le processus de production d\'√©nergie des plantes.',
          'L\'oxyg√®ne est un √©l√©ment essentiel √† la vie.'
        ]
      }
    ],
    'Math√©matiques': [
      {
        'template': 'Quel est le r√©sultat de {op√©ration} ?',
        'operations': ['2 + 3', '5 √ó 4', '10 √∑ 2', '7 - 3', '3¬≤'],
        'answers': ['5', '20', '5', '4', '9'],
        'explanations': [
          '2 + 3 = 5 est une addition simple.',
          '5 √ó 4 = 20 est une multiplication.',
          '10 √∑ 2 = 5 est une division.',
          '7 - 3 = 4 est une soustraction.',
          '3¬≤ = 9 est le carr√© de 3.'
        ]
      }
    ]
  };

  // G√©n√©rer les questions
  Map<String, List<Map<String, dynamic>>> generatedQuestions = {};

  for (String category in questionTemplates.keys) {
    generatedQuestions[category] = [];

    for (Map<String, dynamic> template in questionTemplates[category]!) {
      for (int i = 0; i < 20; i++) {
        // G√©n√©rer 20 questions par template
        Map<String, dynamic> question = generateQuestion(template, i);
        generatedQuestions[category]!.add(question);
      }
    }
  }

  // Sauvegarder dans un fichier JSON
  File outputFile = File('assets/questions/generated_questions_phase5.json');
  outputFile.writeAsStringSync(jsonEncode(generatedQuestions));

  print(
      '‚úÖ ${generatedQuestions.values.expand((x) => x).length} questions g√©n√©r√©es !');
  print(
      'üìÅ Fichier sauvegard√©: assets/questions/generated_questions_phase5.json');
}

Map<String, dynamic> generateQuestion(
    Map<String, dynamic> template, int index) {
  String questionText = template['template'];
  List<String> answers = List<String>.from(template['answers']);
  List<String> explanations = List<String>.from(template['explanations']);

  // Remplacer les placeholders
  if (template.containsKey('elements')) {
    String element = template['elements'][index % template['elements'].length];
    questionText = questionText.replaceAll('{element}', element);
  }

  if (template.containsKey('periodes')) {
    String periode = template['periodes'][index % template['periodes'].length];
    questionText = questionText.replaceAll('{p√©riode}', periode);
  }

  if (template.containsKey('concepts')) {
    String concept = template['concepts'][index % template['concepts'].length];
    questionText = questionText.replaceAll('{concept}', concept);
  }

  if (template.containsKey('domaines')) {
    String domaine = template['domaines'][index % template['domaines'].length];
    questionText = questionText.replaceAll('{domaine}', domaine);
  }

  if (template.containsKey('operations')) {
    String operation =
        template['operations'][index % template['operations'].length];
    questionText = questionText.replaceAll('{op√©ration}', operation);
  }

  // S√©lectionner la bonne r√©ponse
  String correctAnswer = answers[index % answers.length];
  String explanation = explanations[index % explanations.length];

  // G√©n√©rer les mauvaises r√©ponses
  List<String> wrongAnswers = answers.where((a) => a != correctAnswer).toList();
  wrongAnswers.shuffle();
  wrongAnswers = wrongAnswers.take(3).toList();

  // Cr√©er les options
  List<String> options = [correctAnswer, ...wrongAnswers];
  options.shuffle();

  // Cr√©er la map des r√©ponses
  Map<String, bool> answersMap = {};
  for (String option in options) {
    answersMap[option] = option == correctAnswer;
  }

  return {
    'question': questionText,
    'answers': answersMap,
    'correctAnswer': correctAnswer,
    'explanation': explanation,
    'difficulty': 'medium',
    'subcategory': 'G√©n√©r√© automatiquement'
  };
}
