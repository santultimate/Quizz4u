import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/user_progress.dart';
import 'badge_service.dart';

class ProgressService {
  static const String _progressKey = 'user_progress';
  static UserProgress? _currentProgress;

  // Obtenir la progression actuelle
  static UserProgress get currentProgress {
    _currentProgress ??= UserProgress();
    return _currentProgress!;
  }

  // Charger la progression depuis le stockage
  static Future<void> loadProgress() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressJson = prefs.getString(_progressKey);

      if (progressJson != null) {
        final progressMap = json.decode(progressJson) as Map<String, dynamic>;
        _currentProgress = UserProgress.fromMap(progressMap);
        print(
            '[ProgressService] ‚úÖ Progression charg√©e: Niveau ${_currentProgress!.level}, XP: ${_currentProgress!.experiencePoints}');
      } else {
        _currentProgress = UserProgress();
        print('[ProgressService] üÜï Nouvelle progression cr√©√©e');
      }
    } catch (e) {
      print('[ProgressService] ‚ùå Erreur chargement progression: $e');
      _currentProgress = UserProgress();
    }
  }

  // Sauvegarder la progression
  static Future<void> saveProgress() async {
    try {
      if (_currentProgress != null) {
        final prefs = await SharedPreferences.getInstance();
        final progressJson = json.encode(_currentProgress!.toMap());
        await prefs.setString(_progressKey, progressJson);
        print('[ProgressService] ‚úÖ Progression sauvegard√©e');
      }
    } catch (e) {
      print('[ProgressService] ‚ùå Erreur sauvegarde progression: $e');
    }
  }

  // Ajouter de l'exp√©rience
  static Future<void> addExperience(int xp, {String? reason}) async {
    final oldLevel = _currentProgress?.level ?? 1;
    _currentProgress?.addExperience(xp);

    print(
        '[ProgressService] üéØ +$xp XP ajout√©${reason != null ? ' ($reason)' : ''}');
    print(
        '[ProgressService] üìä Niveau: $oldLevel ‚Üí ${_currentProgress?.level}');

    // V√©rifier si niveau sup√©rieur
    if (_currentProgress?.level != null && _currentProgress!.level > oldLevel) {
      print(
          '[ProgressService] üéâ Niveau sup√©rieur atteint: ${_currentProgress!.level}');
    }

    await saveProgress();
  }

  // Ajouter une r√©ponse
  static Future<void> addAnswer(bool isCorrect, int score, String category,
      {String difficulty = 'mixed'}) async {
    print(
        '[ProgressService] üéØ D√©but addAnswer: isCorrect=$isCorrect, score=$score, category=$category, difficulty=$difficulty');

    if (_currentProgress == null) {
      print(
          '[ProgressService] ‚ö†Ô∏è _currentProgress est null, cr√©ation d\'une nouvelle progression');
      _currentProgress = UserProgress();
    }

    _currentProgress?.addAnswer(isCorrect, score);
    _currentProgress?.addCategoryStats(category, isCorrect);

    // Debug: Afficher les statistiques de la cat√©gorie apr√®s mise √† jour
    print(
        '[ProgressService] üìä Statistiques cat√©gorie $category apr√®s mise √† jour: ${_currentProgress?.getCategoryStats(category)}');

    // Calculer XP bas√© sur la r√©ponse (syst√®me progressif)
    int xp = 0;

    if (isCorrect) {
      // XP de base pour bonne r√©ponse (plus mod√©r√©)
      xp = 5;

      // Bonus XP bas√© sur le score (r√©duit)
      int scoreBonus = (score / 20).round(); // R√©duit de 10 √† 20
      xp += scoreBonus;

      // Bonus XP bas√© sur la difficult√©
      if (difficulty == 'hard' || difficulty == 'difficile') {
        xp += 3; // Bonus pour questions difficiles
      } else if (difficulty == 'medium' || difficulty == 'moyen') {
        xp += 1; // Petit bonus pour questions moyennes
      }

      // Bonus XP bas√© sur le niveau actuel (plus difficile = plus de XP)
      int levelBonus = ((_currentProgress?.level ?? 1) / 5)
          .round(); // Bonus tous les 5 niveaux
      xp += levelBonus;
    } else {
      // XP de participation (r√©duit)
      xp = 1; // R√©duit de 2 √† 1
    }

    // Plafonner l'XP maximum par question
    xp = xp.clamp(1, 15); // Maximum 15 XP par question

    print(
        '[ProgressService] üéØ XP calcul√©: $xp (isCorrect=$isCorrect, score=$score)');

    await addExperience(xp,
        reason: isCorrect ? 'Bonne r√©ponse' : 'Participation');

    // V√©rifier les badges classiques
    _currentProgress?.checkAndAddBadges();

    // V√©rifier les nouveaux badges sp√©cialis√©s
    List<String> newBadges =
        BadgeService.checkAllBadges(_currentProgress!, category, difficulty);
    if (newBadges.isNotEmpty) {
      print('[ProgressService] üèÜ Nouveaux badges obtenus: $newBadges');
      await saveProgress(); // Sauvegarder imm√©diatement les nouveaux badges
    }

    print(
        '[ProgressService] üìà R√©ponse enregistr√©e: ${isCorrect ? "‚úÖ" : "‚ùå"} (+$score points)');
    print(
        '[ProgressService] üìä XP total: ${_currentProgress?.experiencePoints}, Niveau: ${_currentProgress?.level}');
  }

  // Obtenir les statistiques
  static Future<Map<String, dynamic>> getStats() async {
    print('[ProgressService] üìä getStats() appel√©');

    if (_currentProgress == null) {
      print('[ProgressService] ‚ö†Ô∏è _currentProgress est null, retour map vide');
      return {};
    }

    // R√©cup√©rer le nom du joueur depuis SharedPreferences
    String playerName = 'Joueur';
    try {
      final prefs = await SharedPreferences.getInstance();
      playerName = prefs.getString('player_name') ?? 'Joueur';
    } catch (e) {
      print('[ProgressService] ‚ùå Erreur lors de la r√©cup√©ration du nom: $e');
    }

    Map<String, dynamic> stats = {
      'level': _currentProgress!.level,
      'experiencePoints': _currentProgress!.experiencePoints,
      'xpForNextLevel': _currentProgress!.xpForNextLevel,
      'levelProgress': _currentProgress!.levelProgress,
      'totalQuestions': _currentProgress!.totalQuestionsAnswered,
      'correctAnswers': _currentProgress!.correctAnswers,
      'accuracyRate': _currentProgress!.accuracyRate,
      'totalScore': _currentProgress!.totalScore,
      'badges': _currentProgress!.badges,
      'categoryStats': _currentProgress!.getAllCategoryStats(),
      'lastPlayed': _currentProgress!.lastPlayed.toIso8601String(),
      'playerName': playerName,
    };

    print('[ProgressService] üìä Statistiques retourn√©es: $stats');
    print(
        '[ProgressService] üìä Statistiques par cat√©gorie d√©taill√©es: ${_currentProgress!.getAllCategoryStats()}');
    return stats;
  }

  // R√©initialiser la progression
  static Future<void> resetProgress() async {
    _currentProgress = UserProgress();
    await saveProgress();
    print('[ProgressService] üîÑ Progression r√©initialis√©e');
  }

  // Obtenir le titre du niveau
  static String getLevelTitle(int level) {
    if (level < 5) return 'D√©butant';
    if (level < 10) return 'Interm√©diaire';
    if (level < 15) return 'Avanc√©';
    if (level < 20) return 'Expert';
    if (level < 25) return 'Ma√Ætre';
    if (level < 30) return 'L√©gende';
    return 'Mythique';
  }

  // Obtenir la description du badge
  static String getBadgeDescription(String badge) {
    // V√©rifier d'abord les nouveaux badges sp√©cialis√©s
    Map<String, dynamic>? badgeInfo = BadgeService.getBadgeInfo(badge);
    if (badgeInfo != null) {
      return badgeInfo['description'] ?? 'Badge sp√©cialis√©';
    }

    // Badges classiques
    switch (badge) {
      case 'questionnaire':
        return 'A r√©pondu √† 100 questions';
      case 'expert':
        return 'Taux de r√©ussite de 90%';
      case 'veteran':
        return 'Niveau 10 atteint';
      case 'champion':
        return '1000 points accumul√©s';
      default:
        return 'Badge myst√©rieux';
    }
  }

  // Obtenir l'ic√¥ne du badge
  static String getBadgeIcon(String badge) {
    // V√©rifier d'abord les nouveaux badges sp√©cialis√©s
    Map<String, dynamic>? badgeInfo = BadgeService.getBadgeInfo(badge);
    if (badgeInfo != null) {
      return badgeInfo['icon'] ?? 'üéñÔ∏è';
    }

    // Badges classiques
    switch (badge) {
      case 'questionnaire':
        return 'üìù';
      case 'expert':
        return 'üéØ';
      case 'veteran':
        return '‚öîÔ∏è';
      case 'champion':
        return 'üèÜ';
      default:
        return 'üéñÔ∏è';
    }
  }

  // Obtenir le nom du badge
  static String getBadgeName(String badge) {
    // V√©rifier d'abord les nouveaux badges sp√©cialis√©s
    Map<String, dynamic>? badgeInfo = BadgeService.getBadgeInfo(badge);
    if (badgeInfo != null) {
      return badgeInfo['name'] ?? 'Badge Sp√©cialis√©';
    }

    // Badges classiques
    switch (badge) {
      case 'questionnaire':
        return 'Questionnaire';
      case 'expert':
        return 'Expert';
      case 'veteran':
        return 'V√©t√©ran';
      case 'champion':
        return 'Champion';
      default:
        return 'Badge Myst√©rieux';
    }
  }
}
