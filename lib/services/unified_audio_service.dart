import 'package:shared_preferences/shared_preferences.dart';
import 'enhanced_sound_manager.dart';

/// Service unifi√© pour la gestion audio
/// Facade simple pour EnhancedSoundManager
class UnifiedAudioService {
  static UnifiedAudioService? _instance;
  static UnifiedAudioService get instance =>
      _instance ??= UnifiedAudioService._();

  UnifiedAudioService._();

  // Gestionnaire audio principal
  final EnhancedSoundManager _enhancedManager = EnhancedSoundManager();

  // √âtat
  bool _isInitialized = false;

  /// Initialise le service audio unifi√©
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      print(
          '[UnifiedAudioService] üîÑ Initialisation du service audio unifi√©...');

      // Initialiser le gestionnaire audio
      await _enhancedManager.initialize();

      _isInitialized = true;
      print('[UnifiedAudioService] ‚úÖ Service audio unifi√© initialis√©');
    } catch (e) {
      print('[UnifiedAudioService] ‚ùå Erreur d\'initialisation: $e');
    }
  }

  // ===== MUSIQUE DE FOND =====

  /// Joue la musique de fond
  Future<void> playBackgroundMusic() async {
    if (!_isInitialized) return;

    // V√©rifier si la musique est activ√©e
    final prefs = await SharedPreferences.getInstance();
    final musicEnabled = prefs.getBool('background_music_enabled') ?? true;

    if (!musicEnabled) {
      print(
          '[UnifiedAudioService] üîá Musique de fond d√©sactiv√©e dans les param√®tres');
      return;
    }

    print('[UnifiedAudioService] üéµ Lancement musique de fond...');
    await _enhancedManager.playBackgroundMusic();
  }

  /// Arr√™te la musique de fond
  Future<void> stopBackgroundMusic() async {
    if (!_isInitialized) return;
    await _enhancedManager.stopBackgroundMusic();
  }

  /// Met en pause la musique de fond
  Future<void> pauseBackgroundMusic() async {
    if (!_isInitialized) return;
    await _enhancedManager.pauseBackgroundMusic();
  }

  /// Reprend la musique de fond
  Future<void> resumeBackgroundMusic() async {
    if (!_isInitialized) return;
    await _enhancedManager.resumeBackgroundMusic();
  }

  // ===== EFFETS SONORES =====

  /// Joue le son de bonne r√©ponse
  Future<void> playGoodSound() async {
    if (!_isInitialized) return;
    await _enhancedManager.playGoodSound();
  }

  /// Joue le son de mauvaise r√©ponse
  Future<void> playBadSound() async {
    if (!_isInitialized) return;
    await _enhancedManager.playBadSound();
  }

  /// Joue le son de clic
  Future<void> playClickSound() async {
    if (!_isInitialized) return;
    // Utiliser le son good comme son de clic
    await _enhancedManager.playGoodSound();
  }

  // ===== GESTION DES PUBLICIT√âS =====

  /// Indique qu'une publicit√© commence
  void setAdPlaying(bool isPlaying) {
    if (!_isInitialized) return;
    _enhancedManager.setAdPlaying(isPlaying);
  }

  // ===== PARAM√àTRES =====

  /// Active/d√©sactive les effets sonores
  Future<void> setSoundEffectsEnabled(bool enabled) async {
    if (!_isInitialized) return;

    print('[UnifiedAudioService] üîä Changement effets sonores: $enabled');
    await _enhancedManager.setSoundEnabled(enabled);

    // Sauvegarder la pr√©f√©rence
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('sound_enabled', enabled);

    print(
        '[UnifiedAudioService] ‚úÖ Effets sonores ${enabled ? 'activ√©s' : 'd√©sactiv√©s'}');
  }

  /// Active/d√©sactive la musique de fond
  Future<void> setBackgroundMusicEnabled(bool enabled) async {
    if (!_isInitialized) return;

    print('[UnifiedAudioService] ÔøΩÔøΩ Changement musique de fond: $enabled');
    await _enhancedManager.setBackgroundMusicEnabled(enabled);

    // Sauvegarder la pr√©f√©rence
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('background_music_enabled', enabled);

    print(
        '[UnifiedAudioService] ‚úÖ Musique de fond ${enabled ? 'activ√©e' : 'd√©sactiv√©e'}');
  }

  /// D√©finit le volume de la musique de fond
  Future<void> setBackgroundVolume(double volume) async {
    if (!_isInitialized) return;
    await _enhancedManager.setBackgroundVolume(volume);
  }

  /// D√©finit le volume des effets sonores
  Future<void> setEffectsVolume(double volume) async {
    if (!_isInitialized) return;
    await _enhancedManager.setEffectVolume(volume);
  }

  /// D√©finit le volume principal
  Future<void> setMasterVolume(double volume) async {
    if (!_isInitialized) return;
    await _enhancedManager.setMasterVolume(volume);
  }

  /// R√©initialise les param√®tres audio
  Future<void> resetSettings() async {
    if (!_isInitialized) return;

    print('[UnifiedAudioService] üîÑ R√©initialisation des param√®tres audio');

    // R√©initialiser le gestionnaire audio
    await _enhancedManager.setSoundEnabled(true);
    await _enhancedManager.setBackgroundMusicEnabled(true);
    await _enhancedManager.setMasterVolume(1.0);
    await _enhancedManager.setBackgroundVolume(0.3);
    await _enhancedManager.setEffectVolume(0.7);

    print('[UnifiedAudioService] ‚úÖ Param√®tres audio r√©initialis√©s');
  }

  // ===== GETTERS =====

  /// Getters pour l'√©tat
  bool get isSoundEffectsEnabled => _enhancedManager.soundEnabled;
  bool get isBackgroundMusicEnabled => _enhancedManager.backgroundMusicEnabled;
  double get backgroundVolume => _enhancedManager.backgroundVolume;
  double get effectsVolume => _enhancedManager.effectVolume;
  bool get isInitialized => _isInitialized;
  bool get isAdPlaying => _enhancedManager.isAdPlaying;

  // ===== NETTOYAGE =====

  /// Nettoie les ressources
  Future<void> dispose() async {
    try {
      await _enhancedManager.dispose();
      _isInitialized = false;
      print('[UnifiedAudioService] üßπ Ressources lib√©r√©es');
    } catch (e) {
      print('[UnifiedAudioService] ‚ùå Erreur nettoyage: $e');
    }
  }
}
